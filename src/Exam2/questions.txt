
=============================================================================== FROM BOOK =========================================================================
corrects: 36/128
wrongs: 4/128

1. Heritage
My Answer: D
Obs: i've answered right, because the Bread tries overwrite a final method.

2. FileReader, skip method
My Answer: A
Obs: i've answered wrong,

3. Encapsulation
My Answer: D
Obs: Correct, Because one of the principals of encapsulation is there are private variables.

4. Increase with <variable>++
My Answer: A
Obs: Correct, Because the i++ has done before the print the value.

5. Switch-Case
My: C
Obs: Correct, after do the replacements the next index does not exist so an exception is throws.

6. Extends and Implements
My: A E
Obs: the classes can extends another one and implements any it wants

7. JDBC
My: C
Obs:Correct, rs.updateString(2,”Jack”) is ignored because commit operation is missing

8. Stream - Terminal Operation allMatch
My: A
Obs: correct, because the terminal operation allMatch runs once, because the first result is false the filter returns nothing.

9. Null Array
My: C
Obs: When the code runs a for with null value , the core throws in run time an exception

10. JDBC - connection creation
My: B
Obs: Incorrect, C is correct - The connection is created in try with resources. So is closed when try clause finishes.
Creating statement upon closed connection produces SQLException

11. Optional Nullable
My: A
ObS: Incorrect, The Nullable returns Optional empty case the object were null, Optional.of can throw an exception when the variable passed is null

12. Try-Catch Resource - Order that the exception is called
My: B
ObS: incorrect, first print "Scanner" step throw when reach the exception the application will call the autoclose in reverse order so call, "Print close", "Scanner closed" and finally
will go to the catch clause printing the main exception "Unable to scan"

13. JDBC create query
My: D
Obs: Correct, the code create correctly a query.

========================================================================== FROM SITE ===============================================================================================
corrects: 44/85
wrongs: 9/85

1. Exceptions hieritance
My: B
Obs: We can throws the super exception and child exception on some time.

2. Stream - Terminal Operation allMatch (Some 8 question from the book)
My: A
Obs: correct, because the terminal operation allMatch runs once, because the first result is false the filter returns nothing.

3. NIO 2 -  Path resolve() method
My: C
Obs: correct, because when the path passed as parameter to resolver were absolute, so the first path is ignored and the
resolver() does not remove simbols like ../  ou ./

4. ZoneDateTime
My: A
Obs: correct, because for calc the negative number increase time, por example GMT-7 , increase seven our for the current time.

5. Extends private method
My: C
Obs: incorrect, when we declare a method with same signature that the super private method it is allowed, but when we try do this
with final method, a compile error occurs, in this questions the compile erro is on the test class
because read() from super is private.

6. IO - BufferedReader
My: D
Obs: correct, because then the ready is called an exception is throw because the stream is closed and before this the file's content is showed.

7. Stream and FlatMap
My: A
Obs: correct, because it is necessary join the lists to print the sequence, for this we can use flatMap with Steam.of(l1, l2).flatMap(list -> list.stream())

8. Interface Implementation
My A E
Obs: A is correct because the abstract class is not required to implement the super methods, E is correct because the class implements correctly the super method
and overload this method correctly.

9. Path - move() - ATOMIC
My: B
Obs:correct, ATOMIC_MOVE , can move the file even if the file exists and the file will be overwrite its content, case if not atomic, a error could be throws
FileExistsException

10. Stream foreach order
My: A
Obs: incorrect, the correct answer is B, because the answer A will print the object hash because the class didn't implement the toString, the B answer user the map
to show the value.

11. Arrays sort
My: A
Obs:The sort method of the Arrays class can sort incoming arrays, and can also pass in a Comparator to determine the array sorting method.
The checkValue method of the CheckClass class is a category method and can be used without materialization

12. Threads - for with executorService
My: C
Obs: incorrect, the correct answer is B, because the threads are executes concurrently because de poll does not have a fixed number, so
ca be create several threads.

13.  Thread - termination
My: B
OBS: is correct because the code does not call the shutdown() method of the ExecutorService method. If es.shutdown();
were the last statement in the main() method, then the program would have terminated and A would be the correct answer.

14.  Assert
My: B
Obs: correct, If assertions are enabled and the boolean expression is false, then a java.lang.AssertionError is thrown.

15. JDBC - UPDATE
My: C
correct, rs.updateString(2,”Jack”) is ignored because commit operation is missing

16. ResourceBundle
My: D

17. UnaryOperator
My: D
correct, map(lv->uo1.apply(lv)) //line n2
fails to compile because the method apply(Integer) is not applicable for the argument (Double)

18. Java Time - Duration
C
correct, The duration defines time based in values whereas Period define date based in values.

19. Sum Double and Integer
C.
Bad return type in lambda expression: double cannot be converted to Integer.

20. LocalDate - PlusYears and PlusDays
A
correct, because LocalDate is immutable so the "plusDays" didn't take effect

21. JDBC -Vendor providers
C D E
JDK contains four interfaces: Driver, Connection, Statement, ResultSet
Each JDBC is providing an own implementation for these interfaces.

22. Stream Predicate
B
correct, Because the code was correctly done.

23. Overwrite with Exception
B
correct, Because the exception , the child class can't declare an super exeception, only more expecifics or the same.
the better answer is B, it changes the throws and the access modifier

24. Locale
D E
correct, Because Locale loc4 = Locale.UK; - Locale loc5 = new Locale (“ru”, “RU”);

25. Functional Interface
A
A – is the only option that compiles.
B – fails since “n->n+10” returns a value but it should implement the method run() correctly which returns void.
C – fails too. The method walk() isn’t static, so it can’t be called like Moveable.walk(20);
D – is false because a functional interface can have only one mehtod that isn’t static or default. In Moveable class it’s run() mehtod.
It has takes Integer as arg and returns nothing.
So the interface definition is correct.

26. Stream Peek
C.
correct, It compiles, but there is no terminal operation for the stream. The program prints nothing.

27. Collection foreach and reduce
A
correct. because the application prits the values and after did a join with the values found in the filter
DOC MPEG JPEG
MPEGJPEG

28. ToIntFunction
A
correct, Because the value "Java" passed by parameter the its index is zero, returning correctly a int value

29. CyclicBarrier
C
correct, The CyclicBarrier object materialization method only needs to call the await method of the CyclicBarrier once. After passing the master of the CyclicBarrier constructor,
the Runnable object and the program after the await method are executed, so this is the correct answer.

30. JDBC - query consulting
D
correct, the code is ok, there is no error

31. private Static integration
A
incorrect, the correct is D, Because the static varible doesn't belong for any instance even if new instances were created, the static stayed the same.

32. UnaryOperator
C
correct, does not compile because code is Integer not Double.

33. JDBC double executeQuery call
A
incorrect, C is correct Because but the detailed reason is Only one resultSet must be open for statement where line 13 will create
a new resultset which will make the previous one null and will result the code into null pointer exception

34. Singleton
B D
correct, Generaly, there are two ways to implement a Singleton:
          1) With a private constructor and a static factory method
          2) As an enum

35. AutoClose - Try Resource
A E
correct, It must implements AutoCloseable and implments the close that throws an Exception
b is incorrect because extends Closeable , it must implements
c is incorrect because the close method was implemented wrongly , it was used the "final" in the method and the access modified is default would be public

36. Path - readAllLines
A
correct, The file is correctly read.

37. Stream Statements
B
incorrect, Correct is A, “Since streams can be used only once, the stream is no longer valid after a terminal operation completes.”
 (page 186 from “OCP Study Guide, from Sybex, Jeanne Boyarsky and Scott Selikoff”).

38. Localization/i18n
A C
incorrect, correct A E
Support for new regional languages does not require recompilation of the code.
Language codes use lowercase letters and region codes use uppercase letters.

39. Extend rules
D
correct, The bake method in the third line of Bread.java will compile errors,
because the Cake class inherits the Cake class, and its bake method has been modified with final and cannot be overwritten.

40. Stream - Max
C
incorrect, Correct is A, Because The max method of the stream object can get the maximum value in the stream element,
 and the Comparator object needs to be provided as a basis for comparing the size of the stream.

 41. statement is true about the DriverManager
 D
 incorrect ,
 Option A, using getConnection method of the DriverManager class,
 can connect to the repository and get the Connection object entity. This is the correct answer.

 42. Functional Interface - Function
 D
 correct, because It accepts an argument and produces a result of any data type.

43. Functional Interface - new Object
C
correct, create a new object using functional interface
Rideable rider = Car : : new;
Car vehicle = rider.getCar(“MyCar”);

44. Stream - Filter and Sorted
A
correct, the app prints
100, Robin, HR
101, Peter, HR

45. Stream with Predicate - print checks
C
incorrect, correct is A because the filter stop to verify when found the first result
str.stream()
.filter(test)
.findFirst()
.ifPresent(System.out ::print);
So que result is:
0 : 0 : pen not 0 : 0 : 0 : 0 : 0 : pen

46. Extends and Implements rules from super class
C
incorrect, E is correct Because All classes compile successfully, when a super class implements the methods from interface the child class does not need implements again

47. Callable and Runnable  -
A
The program prints:
Run Runner
Call Caller : null
And the program does not terminate. because it didn't call the shutdown method.

48. Stream  - count()
A
correct, listVal.stream().peek(x -> x.length()>3).count().get()

49. Comparator
A
correct,  code compiles if you correct AndList to List then answer is A.
[A Guide to Java Tour : 3.0, Beginning with Java : 2.0]
Comparator must implement the  public int compare(Book b1, Book b2);

50. Stream Reduce
C
correct, but the code from exercicie is incorrect because the prodicts.add(), throws an unsuporrtedOperationExeption since the stream is closed after terminal operation

51. encapsulate principals
D
correct, Make the name variable private.

52. Generics with type
D
incorrect, the correct is A because, the type1.set(100); is accepted , the autoboxing is applied here.
The String and Integer there is a toString implementation by default therefore the hash code them doesn't showed

53. NIO2 - skip()
A
incorrect, the answer is B because the skip method jump 2 bytes in the file, so each time it passes in the for it jumps 2 characters
on the string Course::Java  the result is ueJa

54. TreeSet order using Objects without Comparator
B
incorrect, D is correct because the treeSet needs a comparator to know how order it'll print

55. NIO2 - Files.walk()
A
correct, bacause the walk method runs over all files and folders

56. Optional and Nullable
B
correct, because the null value passed to the nullable become empty

57. JDBC - Connection Creation
C
correct, A SQLException is thrown as runtime.
The connection is created in try with resources. So is closed when try clause finishes. Creating statement upon closed connection produces SQLException.

58. Try Resource with AutoCloseable
A
correct,
The ScanImage method of the ImageScanner object is called. It will output “Scan.” and then throw an Exception with the message
“Unable to scan.” This Exception will be caught in the try-with-resources, leaving Before the block enters the catch block,
it will automatically call the call method of the ImagePrinter object, output “Printer closed.”, then automatically
call the ImageScanner object’s call method, and output “Scanner closed.” Because the ImageScanner object is declared and instantiated earlier
than the ImagePrinter object, based on the features of the try-with-resources structure, the ImagePrinter object is closed earlier than the ImageScanner
object. In the catch block, “Unable to scan.” is output.

59. Enumetration with atribuites
B C
correct, Make the USCurrency enumeration constructor private.
Remove the new keyword from the instantion of usCoin.

60. Stream - sort
A
correct, sorted (Comparator.comparing(Emp::getfName).reversed().thenComparing(Emp::getlName))

61. Custom Predicate
B
correct, it was created a Custom Predicate then in the code it same Predicate was overwrote.

62. Stream - .collect(Collectors.groupingBy(Student::getCourse))
A
B is correct, in the code  .forEach((src, res) -> System.out.println(src)) it was printed the group types only
Java EE
Java ME
From less results to more results
The "res" would print the grouped values.
Java EE:Helen:Houston
Java ME:Jessy:Chicago, Java ME:Mark:Chicago

63. NIO2 -  copy
A
incorrect , correct is D because the code should be Path destination = Paths.get(“/data/log.txt”); than Path destination = Paths.get(“/data”) so
the result is A FileAlreadyExistsException is thrown at run time

64. Console entry
A or B because both run
correct, int GDP = Integer.parseInt (br.readline());

65. Thread - AtomicInteger
A
The AtomicInteger’s incrementAndGet method can increase the integer value represented by AtomicInteger,
 and return the integer result. At the same time, when the value of the AtomicInteger object is manipulated,
 only one thread can be accessed at the same time, so the thread-safe can be achieved.
The x field variable of the 8th line of the program is different in each thread and is 1, 2, and 3 after sorting. However,
the order in which thread 9 executes is different, so the output will be any combination of 1, 2, and 3.

66.
B
correct
System.out.println (p1.getNameCount() +“:” + p1.getName(1) + “:” + p1.getFileName());
The getNameCount method of the Path object calculates the number of files or directory names in the path structure.
The path in this question is “/Pics/MyPic.jpeg”, so there are two names “Pics” and “MyPic.jpeg”.
The getName method of the Path object will get the file or directory name in the path structure. The index value starts from 0.
The getFileName method of the Path object gets the last name.
Therefore, this question will be output regardless of whether the file or directory exists:

67. JDBC get Driver
C
correct, Use the DriverManager.getDriver method to load the driver  - class.Class.forName(“com.mysql.jdbc.Driver”);

68. Properties
D
incorrect, it is C because System.out.println(prop.getProperty(“welcome2”, “Test”)) even if the property doesn't exist the program will print the value "Test"
And when the property does not existe , the value will print null

69. Equals implementation
A
correct , the equals method was implemented correctly
public boolean equals (Object obj)

70. TreeMap - order
B
correct, because the TreeMap orders by key

71. Stream group to map
B
Correct, print first the key that has less values

72. MultiCatch
A
incorrect, C is correct because there is Exeption on multicatch it is a super exception

73. Files - Delete files
A. The method deletes all the .class files in the Projects directory and its subdirectories.
correct

74. List file content
B
incorrect, the correct is D because Stream<String> fc = Files.lines (file);

75. flatMapToInt
D
correct, The elements in the stream object referred to by iStr are string-type List objects and cannot be directly converted to integer-type List objects.

76. Generics
B
incorrect, the correct is C because Foo<?, ?> percentage = new Foo <> (97, 32);); is not valid

77. ForkJoinPool
A
correct
ForkJoinPool can divide a big problem into many small problems to perform operations. RecursiveAction is a ForkJoinTask with no return value.
In this topic, use ForkJoinPool and RecursiveAction to perform an element summation calculation of an integer array.
After the invoke method of the ForkJoinPool object is called, the compute method of the RecursiveAction is executed. At this time,
stIndex=0 and lstIndex=10. The formula for the 15th line of the program is not valid. The new Sum object will be forked.
The new thread will be used to calculate the part of “stIndex=3, lstIndex=10”.
The current thread will recalculate “stIndex=0”. , lstIndex = 3″ part.
“stIndex=0, lstIndex=3” will calculate sum=1+2+3=6 and output “6”.
“stIndex=3, lstIndex=10” will fork out “stIndex=6, lstIndex=10”, calculate “stIndex=3, lstIndex=6” as 4+5+6=15, and output “15”.
“stIndex=6, lstIndex=10” will fork out “stIndex=9, lstIndex=10”, calculate “stIndex=6, lstIndex=9” and the sum is 7+8+9=24, and output “24”.
“stIndex=9, lstIndex=10” will calculate sum=10 and output “10”.
Since the above outputs are processed in different threads, the order is not fixed, but the sum of these outputs is the sum of 1 added to 10 “55”. So the answer is Option A.

78. Extends Rules
D F - correct
D. At line 17, insert super (x); because the super class has one constructor with one parameter
F. At line 20, use public void area ( )  because when we extends a method it can't have a more restrictive access control

79. Functional Programing Supplier
D
incorrect, C is correct
static void fly (Supplier<Bird> bird) {
bird.get( ) fly ();
}

80. Assertion
C.
correct
If assertions are enabled and the boolean expression is false , then assertion is
invalid and a java.lang.AssertionError is thrown.

81. Reasons should you use interfaces instead of abstract classes
B E
correct
B. You expect that unrelated classes would implement your interfaces.
E. You want to take advantage of multiple inheritance of type.

82. TreeMap - Comparator (compare (Integer o1, Integer o2))
C
correct
The TreeMap implements the SortedMap interface, so the item elements of the existing TreeMap are sorted. When you instantiate a TreeMap object,
you can pass in a custom Comparator object to determine the size of the project elements, but the order is based on the key of the project,
 not the value. In this topic, the type is Integer’s key, and the way of comparing sizes is arranged in reverse order (return o2.compareTo(o1)),
 that is, the larger the value is, the earlier it will be. For example: 1 will be before 0, 2 will be before 1.

83. Stream peek
B
correct, There is no terminal operation, so the peek doesn't print value.

84. Function Interface - Function
i had not idea!
B
IntFunction<IntUnaryOperator> inFu = x -> y -> x*y;

85. Local Class
A
correct, Inner class has access all members
